#! /bin/sh 
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Example initscript
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Foo Bar <foobar@baz.org>
#
# Please remove the "Author" lines above and replace them
# with your own name if you copy and modify this script.

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/sbin:/usr/local/bin
DESC="Description of the service"
NAME=MCASservice
PIDFILE=/home/i2cat/azure/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
INSTALLATION_PATH=/home/i2cat/azure
LOGFILE="$INSTALLATION_PATH/logfile"
CLASSPATH="lib/*:azure.jar"
MAINCLASS='cat.i2cat.mcaslite.service.TranscoService'



# Exit if the package is not installed
#[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
#[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
#. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
#. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	
	if [ -e $PIDFILE ]
	then
	    PID=$(cat $PIDFILE)
	    
	    if ps ax | grep -v grep | grep $PID 
	    then
		echo "$PID service is already running."
		$(exit 1)

	    else
		echo "$PID is not running but $PIDFILE exists. Let's remove $PIDFILE and start new process"
		rm -f $PIDFILE
		cd $INSTALLATION_PATH
		exec 3>&1 4>&2 >$LOGFILE 2>&1
		java -classpath $CLASSPATH $MAINCLASS &
		exec 1>&3 2>&4
		sleep 1
		pgrep java | xargs ps | grep "azure.jar" | awk '{ print $1 }' > $PIDFILE
	    fi
	else
	    cd $INSTALLATION_PATH
	    exec 3>&1 4>&2 >$LOGFILE 2>&1
	    java -classpath $CLASSPATH $MAINCLASS &
	    exec 1>&3 2>&4
	    sleep 1
	    pgrep java | xargs ps | grep "azure.jar" | awk '{ print $1 }' > $PIDFILE

	fi
	
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	
	if [ -e $PIDFILE ]
	then
	    PID=$(cat $PIDFILE)
	    rm -f $PIDFILE

	    if ps ax | grep -v grep | grep $PID 
	    then
		echo "$PID service running, lets kill it"
		kill -9 $PID || return 2
	    else
		echo "$PID is not running. Cannot stop"  
		$(exit 1)
	    fi
	else
	    echo "PIDFILE does not exist"
	    pgrep java | xargs ps | grep "azure.jar" | awk '{ print $1 }' | xargs kill -9
	 #   pgrep java | wc -l > $PIDFILE
	fi
}

#
# Function that checks the status of the service
#
status() {
  	
	if [ -e $PIDFILE ]
	then
	    PID=$(cat $PIDFILE)
	    	
	    if ps ax | grep -v grep | grep $PID 
	    then
		echo "$PID service running."
	    else
		echo "$PID service is not running."  
	    fi
	else
	    echo "PIDFILE does not exist"
	fi

}
#
# Function that sends a SIGHUP to the daemon/service
#
#do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
#	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
#	return 0
#}

case "$1" in
  start)
	do_start
	;;
  stop)
	do_stop
	;;
  status)
       status
       ;;
  restart)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	do_stop
	do_start
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart}"
	exit 3
	;;
esac

:
